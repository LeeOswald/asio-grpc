name: Build

on:
  push:
    paths:
      - '**.cpp'
      - '**.hpp'
      - '**.ipp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/build.yml'
      - 'sonar-project.properties'
  pull_request:
    paths:
      - '**.cpp'
      - '**.hpp'
      - '**.ipp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/build.yml'
      - 'sonar-project.properties'

env:
  VCPKG_ARGUMENTS: 'doctest grpc[codegen] boost-coroutine boost-asio boost-interprocess boost-thread boost-container boost-process asio libunifex'
  VCPKG_VERSION: '699c8779f1b0feb4ed3564716d1ed31f69663ea6' # Oct 16, 2021
  CMAKE_ARGS: '-DVCPKG_MANIFEST_MODE=off -DASIO_GRPC_BUILD_TESTS=on -DASIO_GRPC_DISCOVER_TESTS=on -DCMAKE_DISABLE_PRECOMPILE_HEADERS=on'
  CTEST_ARGS: '-T test --output-on-failure --timeout 200'

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: 'Windows/2019/MSVC-19.30.30528.0',
            os: windows-2019,
            config: Release,
            triplet: x64-windows,
            cmake-extra-args: '',
            parallel: 2,
          }
          - {
            name: 'MacOSX/11/AppleClang-12.0.5.12050022',
            os: macos-11,
            config: Release,
            triplet: x64-osx,
            cmake-extra-args: '-DASIO_GRPC_USE_BOOST_CONTAINER=on',
            parallel: 3,
          }

    steps:
    - uses: actions/checkout@v2

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg
        vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
        appendedCacheKey: ${{ matrix.config.os }}-v1
        vcpkgTriplet: ${{ matrix.config.triplet }}
        vcpkgArguments: --overlay-ports=${{ github.workspace }}/deps ${{ env.VCPKG_ARGUMENTS }}

    - if: matrix.config.os == 'windows-2019' 
      name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: 'cpp'
        config-file: ./.github/codeql/codeql-config.yml

    - name: Configure CMake
      run: cmake -B ${{ github.workspace }}/build ${{ matrix.config.cmake-extra-args }} "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=${{ matrix.config.config }} ${{ env.CMAKE_ARGS }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.config.config }} --parallel ${{ matrix.config.parallel }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ matrix.config.config }} --parallel 2 ${{ env.CTEST_ARGS }}

    - if: matrix.config.os == 'windows-2019' 
      name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1


  multi-gcc-build:
    name: 'Ubuntu/20.04/GCC-9.3.0,10.3.0,11.1.0'
    runs-on: ubuntu-20.04
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Install GCC 11 and gcovr
      run: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test &&
        sudo apt-get install g++-11 &&\
        sudo apt-get install gcovr

    - name: Make gcc-9 default compiler
      run: |
        sudo update-alternatives --install /usr/bin/cc cc $(which gcc-9) 50 &&\
        sudo update-alternatives --set cc $(which gcc-9) &&\
        sudo update-alternatives --install /usr/bin/c++ c++ $(which g++-9) 50 &&\
        sudo update-alternatives --set c++ $(which g++-9)  &&\
        sudo update-alternatives --install /usr/bin/cpp cpp $(which g++-9) 50 &&\
        sudo update-alternatives --set cpp $(which g++-9)

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of sonarsource reporting
        fetch-depth: 0

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg
        vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
        appendedCacheKey: ubuntu-gcc-v1
        vcpkgTriplet: x64-linux
        vcpkgArguments: --overlay-ports=${{ github.workspace }}/deps ${{ env.VCPKG_ARGUMENTS }}

    - name: GCC 9 Configure CMake
      run: cmake -B ${{ github.workspace }}/build-9 -DCMAKE_CXX_COMPILER=$(which g++-9) "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release ${{ env.CMAKE_ARGS }}

    - name: GCC 9 Build
      run: cmake --build ${{ github.workspace }}/build-9 --config Release --parallel $(nproc)

    - name: GCC 9 Test
      working-directory: ${{ github.workspace }}/build-9
      run: ctest -C Release --parallel $(nproc) ${{ env.CTEST_ARGS }}

    - name: GCC 10 Configure CMake
      run: cmake -B ${{ github.workspace }}/build-10 -DCMAKE_CXX_COMPILER=$(which g++-10) -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Debug ${{ env.CMAKE_ARGS }} -DCMAKE_EXPORT_COMPILE_COMMANDS=on -DASIO_GRPC_TEST_COVERAGE=on -DASIO_GRPC_GCOV_PROGRAM=$(which gcov-10) -DASIO_GRPC_COVERAGE_OUTPUT_FILE=${{ github.workspace }}/build-10/sonarqube-coverage.xml

    - name: GCC 10 Build
      run: cmake --build ${{ github.workspace }}/build-10 --config Debug --parallel $(nproc)

    - name: GCC 10 Test
      working-directory: ${{ github.workspace }}/build-10
      run: ctest -C Debug --parallel $(nproc) ${{ env.CTEST_ARGS }}

    - name: GCC 10 Coverage
      run: cmake --build ${{ github.workspace }}/build-10 --config Debug --target asio-grpc-test-cpp20-coverage

    - name: Download sonar-scanner
      uses: warchant/setup-sonar-scanner@v3
      with:
        version: 4.6.2.2472

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.cfamily.compile-commands=${{ github.workspace }}/build-10/compile_commands.json \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.coverageReportPaths=${{ github.workspace }}/build-10/sonarqube-coverage.xml

    - name: GCC 11 Configure CMake
      run: cmake -B ${{ github.workspace }}/build-11 -DCMAKE_CXX_COMPILER=$(which g++-11) "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release ${{ env.CMAKE_ARGS }}

    - name: GCC 11 Build
      run: cmake --build ${{ github.workspace }}/build-11 --config Release --parallel $(nproc)

    - name: GCC 11 Test
      working-directory: ${{ github.workspace }}/build-11
      run: ctest -C Release --parallel $(nproc) ${{ env.CTEST_ARGS }}


  multi-clang-build:
    name: 'Ubuntu/20.04/Clang-10.0.0,11.0.0,12.0.0'
    runs-on: ubuntu-20.04

    steps:
    - name: Make clang-10 default compiler
      run: |
        sudo update-alternatives --install /usr/bin/cc cc $(which clang-10) 50 &&\
        sudo update-alternatives --set cc $(which clang-10) &&\
        sudo update-alternatives --install /usr/bin/c++ c++ $(which clang++-10) 50 &&\
        sudo update-alternatives --set c++ $(which clang++-10)  &&\
        sudo update-alternatives --install /usr/bin/cpp cpp $(which clang++-10) 50 &&\
        sudo update-alternatives --set cpp $(which clang++-10)

    - uses: actions/checkout@v2

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg
        vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
        appendedCacheKey: ubuntu-clang-v1
        vcpkgTriplet: x64-linux
        vcpkgArguments: --overlay-ports=${{ github.workspace }}/deps ${{ env.VCPKG_ARGUMENTS }}

    - name: Clang 10 Configure CMake
      run: cmake -B ${{ github.workspace }}/build-10 -DCMAKE_CXX_COMPILER=$(which clang++-10) -DASIO_GRPC_USE_BOOST_CONTAINER=on "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release ${{ env.CMAKE_ARGS }}

    - name: Clang 10 Build
      run: cmake --build ${{ github.workspace }}/build-10 --config Release --parallel $(nproc)

    - name: Clang 10 Test
      working-directory: ${{ github.workspace }}/build-10
      run: ctest -C Release --parallel $(nproc) ${{ env.CTEST_ARGS }}

    - name: Clang 11 Configure CMake
      run: cmake -B ${{ github.workspace }}/build-11 -DCMAKE_CXX_COMPILER=$(which clang++-11) -DASIO_GRPC_USE_BOOST_CONTAINER=on "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release ${{ env.CMAKE_ARGS }}

    - name: Clang 11 Build
      run: cmake --build ${{ github.workspace }}/build-11 --config Release --parallel $(nproc)

    - name: Clang 11 Test
      working-directory: ${{ github.workspace }}/build-11
      run: ctest -C Release --parallel $(nproc) ${{ env.CTEST_ARGS }}

    - name: Clang 12 Configure CMake
      run: cmake -B ${{ github.workspace }}/build-12 -DCMAKE_CXX_COMPILER=$(which clang++-12) -DASIO_GRPC_USE_BOOST_CONTAINER=on "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release ${{ env.CMAKE_ARGS }}

    - name: Clang 12 Build
      run: cmake --build ${{ github.workspace }}/build-12 --config Release --parallel $(nproc)

    - name: Clang 12 Test
      working-directory: ${{ github.workspace }}/build-12
      run: ctest -C Release --parallel $(nproc) ${{ env.CTEST_ARGS }}

