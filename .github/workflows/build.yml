name: Build

on:
  push:
    paths:
      - '**.cpp'
      - '**.hpp'
      - '**.ipp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/build.yml'
      - 'sonar-project.properties'
  pull_request:
    paths:
      - '**.cpp'
      - '**.hpp'
      - '**.ipp'
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '.github/workflows/build.yml'
      - 'sonar-project.properties'

env:
  VCPKG_ARGUMENTS: 'doctest grpc[codegen] boost-coroutine boost-core boost-intrusive boost-lockfree boost-asio boost-interprocess boost-thread boost-container'
  VCPKG_VERSION: '2a31089e777fc187f1cc05338250b8e1810cfb52' # Oct 02, 2021

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: 'Windows/2019/MSVC-19.30.30528.0',
            os: windows-2019,
            config: Release,
            triplet: x64-windows,
            cmake-extra-args: '',
            parallel: 1,
          }
          - {
            name: 'MacOSX/11/AppleClang-12.0.5.12050022',
            os: macos-11,
            config: Release,
            triplet: x64-osx,
            cmake-extra-args: '-DASIO_GRPC_USE_BOOST_CONTAINER=on',
            parallel: 3,
          }

    steps:
    - uses: actions/checkout@v2

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
        vcpkgArguments: ${{ env.VCPKG_ARGUMENTS }}
        vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
        vcpkgTriplet: ${{ matrix.config.triplet }}

    - if: matrix.config.os == 'windows-2019' 
      name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: 'cpp'

    - name: Configure CMake
      run: cmake -B ${{ github.workspace }}/build ${{ matrix.config.cmake-extra-args }} "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_MANIFEST_MODE=off -DCMAKE_BUILD_TYPE=${{ matrix.config.config }} -DASIO_GRPC_BUILD_TESTS=on -DASIO_GRPC_DISCOVER_TESTS=on -DASIO_GRPC_BUILD_EXAMPLES=on -DCMAKE_DISABLE_PRECOMPILE_HEADERS=on

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.config.config }} --parallel ${{ matrix.config.parallel }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ matrix.config.config }} -T test -j 2 --output-on-failure --timeout 200

    - if: matrix.config.os == 'windows-2019' 
      name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  build-and-scan:
    name: Ubuntu/20.04/GCC-10.3.0/Debug
    runs-on: ubuntu-20.04
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Make gcc-10 default compiler
      run: |
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-10 50 &&\
        sudo update-alternatives --set cc /usr/bin/gcc-10 &&\
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-10 50 &&\
        sudo update-alternatives --set c++ /usr/bin/g++-10  &&\
        sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/g++-10 50 &&\
        sudo update-alternatives --set cpp /usr/bin/g++-10

    - name: Install gcovr
      run: |
        sudo apt-get update &&\
        sudo apt-get install gcovr

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of sonarsource reporting
        fetch-depth: 0

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
        vcpkgArguments: ${{ env.VCPKG_ARGUMENTS }}
        vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
        vcpkgTriplet: x64-linux

    - name: Configure CMake
      run: |
        cmake -B ${{ github.workspace }}/build \
          -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DVCPKG_MANIFEST_MODE=off \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=on \
          -DCMAKE_BUILD_TYPE=Debug \
          -DASIO_GRPC_BUILD_TESTS=on \
          -DASIO_GRPC_DISCOVER_TESTS=on \
          -DASIO_GRPC_BUILD_EXAMPLES=on \
          -DCMAKE_DISABLE_PRECOMPILE_HEADERS=on \
          -DASIO_GRPC_TEST_COVERAGE=on \
          -DASIO_GRPC_GCOV_PROGRAM=/usr/bin/gcov-10 \
          -DASIO_GRPC_COVERAGE_OUTPUT_FILE=${{ github.workspace }}/build/sonarqube-coverage.xml

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config Debug --parallel 2

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C Debug -T test -j 2 --output-on-failure --timeout 200

    - name: Coverage
      run: cmake --build ${{ github.workspace }}/build --config Debug --target asio-grpc-test-cpp20-coverage

    - name: Download sonar-scanner
      uses: warchant/setup-sonar-scanner@v3
      with:
        version: 4.6.2.2472

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.cfamily.compile-commands=${{ github.workspace }}/build/compile_commands.json \
          -Dsonar.cfamily.gcov.reportsPath=${{ github.workspace }}/build \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.coverageReportPaths=${{ github.workspace }}/build/sonarqube-coverage.xml

  multi-gcc-build:
    name: 'MacOSX/11/GCC-9.4.0,11.2.0'
    runs-on: macos-11

    steps:
    - name: Set default compiler
      run: |
        sudo ln -s $(which gcc-9) /usr/bin/cc &&\
        sudo ln -s $(which g++-9) /usr/bin/c++ &&\
        sudo ln -s $(which g++-9) /usr/bin/cpp

    - uses: actions/checkout@v2

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
        vcpkgArguments: ${{ env.VCPKG_ARGUMENTS }}
        vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
        vcpkgTriplet: x64-osx
        appendedCacheKey: macos-gcc

    - name: GCC 9 Configure CMake
      run: cmake -B ${{ github.workspace }}/build-0 -DCMAKE_CXX_COMPILER=$(which g++-9) "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_MANIFEST_MODE=off -DCMAKE_BUILD_TYPE=Release -DASIO_GRPC_BUILD_TESTS=on -DASIO_GRPC_DISCOVER_TESTS=on -DASIO_GRPC_BUILD_EXAMPLES=on -DCMAKE_DISABLE_PRECOMPILE_HEADERS=on

    - name: GCC 9 Build
      run: cmake --build ${{ github.workspace }}/build-0 --config Release --parallel $(nproc)

    - name: GCC 9 Test
      working-directory: ${{ github.workspace }}/build-0
      run: ctest -C Release -T test -j $(nproc) --output-on-failure --timeout 200

    - name: GCC 11 Configure CMake
      run: cmake -B ${{ github.workspace }}/build-0 -DCMAKE_CXX_COMPILER=$(which g++-11) "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_MANIFEST_MODE=off -DCMAKE_BUILD_TYPE=Release -DASIO_GRPC_BUILD_TESTS=on -DASIO_GRPC_DISCOVER_TESTS=on -DASIO_GRPC_BUILD_EXAMPLES=on -DCMAKE_DISABLE_PRECOMPILE_HEADERS=on

    - name: GCC 11 Build
      run: cmake --build ${{ github.workspace }}/build-0 --config Release --parallel $(nproc)

    - name: GCC 11 Test
      working-directory: ${{ github.workspace }}/build-0
      run: ctest -C Release -T test -j $(nproc) --output-on-failure --timeout 200


  multi-clang-build:
    name: 'Ubuntu/20.04/Clang-10.0.0,11.0.0,12.0.0'
    runs-on: ubuntu-20.04

    steps:
    - name: Set default compiler
      run: |
        sudo update-alternatives --install /usr/bin/cc cc $(which clang-10) 50 &&\
        sudo update-alternatives --set cc $(which clang-10) &&\
        sudo update-alternatives --install /usr/bin/c++ c++ $(which clang++-10) 50 &&\
        sudo update-alternatives --set c++ $(which clang++-10)  &&\
        sudo update-alternatives --install /usr/bin/cpp cpp $(which clang++-10) 50 &&\
        sudo update-alternatives --set cpp $(which clang++-10)

    - uses: actions/checkout@v2

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
        vcpkgArguments: ${{ env.VCPKG_ARGUMENTS }}
        vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
        vcpkgTriplet: x64-linux
        appendedCacheKey: ubuntu-clang

    - name: Clang 10 Configure CMake
      run: cmake -B ${{ github.workspace }}/build-0 -DCMAKE_CXX_COMPILER=$(which clang++-10) -DASIO_GRPC_USE_BOOST_CONTAINER=on "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_MANIFEST_MODE=off -DCMAKE_BUILD_TYPE=Release -DASIO_GRPC_BUILD_TESTS=on -DASIO_GRPC_DISCOVER_TESTS=on -DASIO_GRPC_BUILD_EXAMPLES=on -DCMAKE_DISABLE_PRECOMPILE_HEADERS=on

    - name: Clang 10 Build
      run: cmake --build ${{ github.workspace }}/build-0 --config Release --parallel $(nproc)

    - name: Clang 10 Test
      working-directory: ${{ github.workspace }}/build-0
      run: ctest -C Release -T test --parallel $(nproc) --output-on-failure --timeout 200

    - name: Clang 11 Configure CMake
      run: cmake -B ${{ github.workspace }}/build-0 -DCMAKE_CXX_COMPILER=$(which clang++-11) -DASIO_GRPC_USE_BOOST_CONTAINER=on "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_MANIFEST_MODE=off -DCMAKE_BUILD_TYPE=Release -DASIO_GRPC_BUILD_TESTS=on -DASIO_GRPC_DISCOVER_TESTS=on -DASIO_GRPC_BUILD_EXAMPLES=on -DCMAKE_DISABLE_PRECOMPILE_HEADERS=on

    - name: Clang 11 Build
      run: cmake --build ${{ github.workspace }}/build-0 --config Release --parallel $(nproc)

    - name: Clang 11 Test
      working-directory: ${{ github.workspace }}/build-0
      run: ctest -C Release -T test --parallel $(nproc) --output-on-failure --timeout 200

    - name: Clang 12 Configure CMake
      run: cmake -B ${{ github.workspace }}/build-0 -DCMAKE_CXX_COMPILER=$(which clang++-12) -DASIO_GRPC_USE_BOOST_CONTAINER=on "-DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_MANIFEST_MODE=off -DCMAKE_BUILD_TYPE=Release -DASIO_GRPC_BUILD_TESTS=on -DASIO_GRPC_DISCOVER_TESTS=on -DASIO_GRPC_BUILD_EXAMPLES=on -DCMAKE_DISABLE_PRECOMPILE_HEADERS=on

    - name: Clang 12 Build
      run: cmake --build ${{ github.workspace }}/build-0 --config Release --parallel $(nproc)

    - name: Clang 12 Test
      working-directory: ${{ github.workspace }}/build-0
      run: ctest -C Release -T test --parallel $(nproc) --output-on-failure --timeout 200

